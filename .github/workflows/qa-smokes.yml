name: QA Smoke Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      app_url:
        description: 'App URL to test'
        required: false
        default: 'https://resonai.vercel.app'
        type: string

jobs:
  qa-smokes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright
      run: npx playwright install --with-deps firefox
      
    - name: Run QA smoke tests
      run: |
        export APP_URL="${{ github.event.inputs.app_url || 'https://resonai.vercel.app' }}"
        npx playwright test --project=firefox --reporter=html,json,junit
      env:
        HEADLESS: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: |
          playwright-report/
          test-results/
        retention-days: 30
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results
          let testResults = {};
          try {
            const resultsPath = 'test-results/results.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              testResults = results;
            }
          } catch (error) {
            console.log('Could not read test results:', error.message);
          }
          
          // Generate summary table
          const generateSummary = (suites) => {
            if (!suites || !Array.isArray(suites)) return 'No test results available';
            
            let summary = '## 🧪 QA Smoke Test Results\n\n';
            summary += '| Proof | Status | Duration |\n';
            summary += '|-------|--------|----------|\n';
            
            suites.forEach(suite => {
              const status = suite.status === 'passed' ? '✅ Pass' : 
                           suite.status === 'failed' ? '❌ Fail' : '⚠️ Unknown';
              const duration = suite.duration ? `${Math.round(suite.duration)}ms` : 'N/A';
              summary += `| ${suite.title} | ${status} | ${duration} |\n`;
            });
            
            return summary;
          };
          
          const summary = generateSummary(testResults.suites);
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

