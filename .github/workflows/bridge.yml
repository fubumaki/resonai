name: bridge

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  bridge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Detect bridge macro / labels
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const readyMacro = '@cloud ready-for-gate';
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function loadPullRequest() {
              if (context.payload.pull_request) {
                return context.payload.pull_request;
              }

              const issue = context.payload.issue;
              if (!issue?.pull_request) {
                return null;
              }

              const number = issue.number;
              const { data } = await github.rest.pulls.get({ owner, repo, pull_number: number });
              return data;
            }

            const pr = await loadPullRequest();
            if (!pr) {
              core.info('No pull request context found; skipping.');
              return;
            }

            const commentBody = context.payload.comment?.body ?? '';
            const hasMacro = commentBody.includes(readyMacro);
            const hasLabel = (pr.labels || []).some((label) => label.name === 'codex:ready');

            if (!hasMacro && !hasLabel) {
              core.info('Ready signal not detected.');
              return;
            }

            let ssot = '';
            try {
              ssot = fs.readFileSync('.artifacts/SSOT.md', 'utf8').trim();
            } catch (error) {
              core.warning(`SSOT not found: ${error.message}`);
            }

            const commentLines = ['## Bridge', '**Ready for cloud gate.**', ''];
            commentLines.push(ssot || '_SSOT will be attached by CI._');

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr.number,
              body: commentLines.join('\n'),
            });

            const existing = new Set((pr.labels || []).map((label) => label.name));
            if (!existing.has('codex:needs-gate')) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pr.number,
                labels: ['codex:needs-gate'],
              });
            }
